#!/usr/bin/env ruby
# encoding: UTF-8

#-$a. ------------------ .a$ ---------------------------- %$!, ----------------%
# `$¸   .%$$^¸$$aa.     .¸$`        .        .a$a$$.      `¸$%  $a$.        .
#-.aaa$ $$$$'- $$$$$.- $aaa. -.a%$^"$$aa -- .$$$$$'- $$a. $aaa. `$,$ ----------%
#;$$$$',a$a$  d$%$$$$$,'$$$$;$$$$$  $$$$$., $$%$$"  d$a$$ '$$$$; $$$   .a%$  $$a
#:$$$$;$$$$%; Z$$$$$$$$;$$$$:$$$$$. $$$$^$,;$$&$$   Z$$$$,;$$$$.a$$$a..$$$   $$$
#.$$$$ `$$$$.  $$$%$$$' $$$$.`$$$$  $$%$$$$ `$$$$.   $%$$$ $$$$""$$$" $$$$:  a$$
# `$$$a.$$%$   $$$$$$';a$$$`  `¸$$aa$$$$&$': `$$$$a. $$$$'a$$$`.$$'$  $$$$;  $$$
#%-----.------ $$$$'--------------- $$%$$' -- `¸$$$$$%$¸' ---- $$¸$a. `"$&$$#$%$
#dz      .   .:'¸'     .        .   $$$$'     .        .       `¸$$$$y.     `$$&
#%--------- a`-----------.--------- $$¸' -----.------------.---------------- $$$
#   .      !a    . .    .      .   .:'   .  .                  .        .:.a$$$¸
#.      .  '$a,          .        a` .   'a          .   .             s` .  . .
#      .    ¸$Aa         .       !a       a!      .    .         ..   %s      .s
#   .         ¸¸'     . .        '$$Aa.aA$$'        . .               `!$%a.a%#$
#==============================================================================
#   t h e    i n i q u i t y    p a c k a g e    m a n a g e r
#==============================================================================

trap("INT") {exit}

SYSTEM = ENV["INIQUITY_SYSTEM"] || Dir.pwd
ENV["INIQUITY_SYSTEM"] = SYSTEM

require "inifile"
require "github_api"
require "highline"
require "open-uri"
require "zip"

### Iniquity Package Manager

puts "\nipm - The Iniquity Package Manager.\n\n"

# If "init" passed.
if ARGV[0] && ARGV[0] == "init"
    new_system_file = File.new(SYSTEM + "/iniquity.ini", "w")
    new_system_file.puts "[profile]\nname=NewBBS\n"
    new_system_file.puts "\n[ipm]\nsources=iniquitybbs\n"
    new_system_file.puts "\n[telnet]\nenabled=yes\n"
    new_system_file.puts "port=3023\n"
    new_system_file.puts "\n[rest]\nenabled=yes\n"
    new_system_file.puts "port=3080\n"
    new_system_file.close
    abort "ipm - Initialized directory as a new Iniquity BBS.\n\n"
end

if File.exists?(SYSTEM + "/iniquity.ini")
    CONFIG = IniFile.load(SYSTEM+ "/iniquity.ini")
else
    abort "ipm - An Iniquity system must have an iniquity.ini file.\n\n"
end

# Find all available ipm packages across all sources...
available_packages = []

if CONFIG["ipm"]["sources"]
    CONFIG["ipm"]["sources"].split(",").each do |source|

        repositories = Github.repos.list user: "#{source}"

        repositories.each do |pkg|
            if pkg.name.match(/^ip/)
                available_packages.push(pkg)
            end
        end
    end
end

installed_packages = []

Dir.chdir SYSTEM
Dir.glob('*').select { |pkg|
    if File.directory? pkg
        installed_packages.push pkg
    end
}

# If "install" passed.
if ARGV[0] && ARGV[0] == "install"

    ARGV.shift

    if ARGV[0]
        ARGV.each do |install|
            available_packages.each do |ipm|

                if install == ipm.name
                    next if Dir.exists? SYSTEM + "/#{ipm.name}"

                    # Need to wrap this sequence in a try/catch of some kind...

                    download = open("https://github.com/#{ipm.full_name}/archive/master.zip")
                    IO.copy_stream(download, SYSTEM + "/#{ipm.name}.zip")

                    Zip::File.open(SYSTEM + "/#{ipm.name}.zip") do |zip_file|
                        zip_file.each do |entry|
                            entry.extract(SYSTEM + "/#{entry.name}")
                        end
                    end

                    FileUtils.mv SYSTEM + "/#{ipm.name}-master", SYSTEM + "/#{ipm.name}"
                    FileUtils.rm SYSTEM + "/#{ipm.name}.zip"
                    puts "ipm - Installed #{ipm.name}\n\n"
                end
            end
        end
    else
        abort "ipm - You must specify an ipm package name to install.\n\n"
    end
end

# If "uninstall" passed.
if ARGV[0] && ARGV[0] == "uninstall"

    #ARGV.shift

    if ARGV[0]
        ARGV.each do |uninstall|
            abort "ipm - Sorry, uninstall doesn't work yet.\n\n"
        end
    end
end

# If no options passed.
unless ARGV[0]

    if available_packages.length > 0
        puts "ipm - Packages available for installation.\n\n"

        available_packages.each do |ipm|
            puts ipm.name
            puts ipm.description
            #puts "https://github.com/#{ipm.full_name}/archive/master.zip"
            puts ""
        end
    end

    if installed_packages.length > 0
        puts "ipm - Packages currently installed.\n\n"

        installed_packages.each do |ipm|
            puts ipm
        end
    end
end
